// <auto-generated />
using System;
using Library.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Library.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210102101709_AddingRoles")]
    partial class AddingRoles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Library.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "James",
                            LastName = "Bond"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Jackie",
                            LastName = "Chan"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Sylvester",
                            LastName = "Stallone"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Van",
                            LastName = "Damme"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Jet",
                            LastName = "Lee"
                        });
                });

            modelBuilder.Entity("Library.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("BorrowerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BorrowerId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            IsAvailable = true,
                            Title = "Spectre"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            IsAvailable = true,
                            Title = "Casino Royal"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            IsAvailable = true,
                            Title = "007"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 1,
                            IsAvailable = true,
                            Title = "The spy who loved me"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 1,
                            IsAvailable = true,
                            Title = "From russia with love"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 1,
                            IsAvailable = true,
                            Title = "Die another day"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 2,
                            IsAvailable = true,
                            Title = "Rush Hour"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 2,
                            IsAvailable = true,
                            Title = "Police story"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 2,
                            IsAvailable = true,
                            Title = "Who am I?"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 2,
                            IsAvailable = true,
                            Title = "The karate kid"
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 2,
                            IsAvailable = true,
                            Title = "Drunken Master"
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 3,
                            IsAvailable = true,
                            Title = "Rambo"
                        },
                        new
                        {
                            Id = 13,
                            AuthorId = 3,
                            IsAvailable = true,
                            Title = "First Blood"
                        },
                        new
                        {
                            Id = 14,
                            AuthorId = 3,
                            IsAvailable = true,
                            Title = "The expendables"
                        },
                        new
                        {
                            Id = 15,
                            AuthorId = 3,
                            IsAvailable = true,
                            Title = "Escape plan"
                        },
                        new
                        {
                            Id = 16,
                            AuthorId = 3,
                            IsAvailable = true,
                            Title = "Judgment Day"
                        },
                        new
                        {
                            Id = 17,
                            AuthorId = 4,
                            IsAvailable = true,
                            Title = "Hard Target"
                        },
                        new
                        {
                            Id = 18,
                            AuthorId = 4,
                            IsAvailable = true,
                            Title = "Double Impact"
                        },
                        new
                        {
                            Id = 19,
                            AuthorId = 4,
                            IsAvailable = true,
                            Title = "Universal Soldier"
                        },
                        new
                        {
                            Id = 20,
                            AuthorId = 4,
                            IsAvailable = true,
                            Title = "Hard Way"
                        },
                        new
                        {
                            Id = 21,
                            AuthorId = 4,
                            IsAvailable = true,
                            Title = "Street Fighter"
                        },
                        new
                        {
                            Id = 22,
                            AuthorId = 4,
                            IsAvailable = true,
                            Title = "Bullet in the head"
                        },
                        new
                        {
                            Id = 23,
                            AuthorId = 5,
                            IsAvailable = true,
                            Title = "The Black Mask"
                        },
                        new
                        {
                            Id = 24,
                            AuthorId = 5,
                            IsAvailable = true,
                            Title = "Romeo Must Die"
                        },
                        new
                        {
                            Id = 25,
                            AuthorId = 5,
                            IsAvailable = true,
                            Title = "Cradle to the grave"
                        },
                        new
                        {
                            Id = 26,
                            AuthorId = 5,
                            IsAvailable = true,
                            Title = "Once upon a time in China"
                        },
                        new
                        {
                            Id = 27,
                            AuthorId = 5,
                            IsAvailable = true,
                            Title = "Hero"
                        },
                        new
                        {
                            Id = 28,
                            AuthorId = 5,
                            IsAvailable = true,
                            Title = "Fearless"
                        },
                        new
                        {
                            Id = 29,
                            AuthorId = 5,
                            IsAvailable = true,
                            Title = "Fist of legend"
                        },
                        new
                        {
                            Id = 30,
                            AuthorId = 5,
                            IsAvailable = true,
                            Title = "The one"
                        },
                        new
                        {
                            Id = 31,
                            AuthorId = 5,
                            IsAvailable = true,
                            Title = "Unleashed"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Library.Data.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "4D69ED13-08F0-46DE-DE69-5FFE74A43A37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b67a37bc-f81f-4bf9-b0a8-0c7dddd0e60a",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c29c0f46-9ebf-4e65-be40-4a3b606de966",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1960, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Debra",
                            LastName = "Kristen"
                        },
                        new
                        {
                            Id = "EC72E9E5-50EB-8460-4469-A916232838B5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c94dce3b-f39a-4ead-82a6-3bf4f8252419",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cf8aa5a4-aaaf-409a-99c0-481797a2bf54",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1964, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Patrick",
                            LastName = "Caleb"
                        },
                        new
                        {
                            Id = "D2D57256-EFC2-3259-D7BB-7A126DDC3CE2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7cb95272-34ad-42f8-b737-da61be69bd29",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15187a4d-641d-44a9-ad6e-815d2238a06e",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(2007, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Penelope",
                            LastName = "Philip"
                        },
                        new
                        {
                            Id = "8A6C8FB7-461F-187B-0B96-E2EFBBF7A8EB",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df9193ed-ed3e-4a3d-8efd-b44c66db3e29",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0e075f62-7141-4443-b2c0-1c0ca5d2e62f",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1962, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Armand",
                            LastName = "Jack"
                        },
                        new
                        {
                            Id = "9CDFB677-9945-9AAB-B988-352A780D5F50",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f562ea81-8afd-4903-99e3-f15928449c08",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f3a27e8f-e8e5-4618-b363-29823d328344",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(2007, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Brittany",
                            LastName = "Elmo"
                        },
                        new
                        {
                            Id = "B0268B9E-510C-8DE9-2C11-31B8FC0AE1F2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1213b362-5fe2-431d-a0e3-6beecdfa6226",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90b7a8ea-5e6a-4abd-b798-3f42e2d7dbf8",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1970, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Gwendolyn",
                            LastName = "Reese"
                        },
                        new
                        {
                            Id = "F89981C5-066C-CE27-7E6D-FBE7C845C60C",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5713cee1-8d10-4bea-96f5-a06dfc3e6f2f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dbc14014-240f-4559-b19d-b1827c9487c3",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(2001, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Myra",
                            LastName = "Lana"
                        },
                        new
                        {
                            Id = "C8AB11C9-7812-0753-64CF-46FA919744C0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "937f49fc-b928-41f1-bb20-50c740b6a7c1",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd4f07b2-96a2-4210-a52e-3dc1da61f6a3",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1972, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Lana",
                            LastName = "Holly"
                        },
                        new
                        {
                            Id = "AEE7B39C-0613-3443-BC1C-6911A94B7846",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "181bf726-4069-4ea2-a183-9c494235b0aa",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4332a89c-976b-40e7-a661-070d62f1ebc0",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1965, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Riley",
                            LastName = "Yasir"
                        },
                        new
                        {
                            Id = "0D3F221A-ED66-C81D-9C57-5DBE93551E26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5463c8bd-6e64-4096-b116-58bbb38e9ab6",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bed2db01-4163-48f0-890f-5c473228fe16",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1977, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Caldwell",
                            LastName = "Kaitlin"
                        },
                        new
                        {
                            Id = "3CC0CC6E-7CD2-BE49-813B-913A94C80FD9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b76678e-2c9a-4c14-82c7-e8b6e8661830",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "738ebabe-611e-41f9-989f-3c43440f5b24",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1994, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alfreda",
                            LastName = "Kim"
                        },
                        new
                        {
                            Id = "B87C5391-D282-961A-AADD-10501EFCA2A8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08fde93c-a03e-491a-8820-df3e8980b745",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e6171942-77c7-4260-8843-045d19b47226",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(2007, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Stephen",
                            LastName = "Amethyst"
                        },
                        new
                        {
                            Id = "1144D05C-F75A-AE5C-B806-0EEE7CF38021",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bbcd032e-1a8a-41cb-8f8e-9947d7aa68f1",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab69e0cc-fe54-4949-8733-de2ee9de4bd5",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1965, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Donovan",
                            LastName = "Lacy"
                        },
                        new
                        {
                            Id = "5035504A-00BC-450A-49B8-11F9309CE924",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6243b8b0-88dc-494f-8298-f8be259f1523",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1d5f594c-d4b5-4d13-9766-953e77a28cc9",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1959, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Daphne",
                            LastName = "Plato"
                        },
                        new
                        {
                            Id = "FC00EA26-D0AF-876B-C655-5FB95C1BFBBB",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5458ea2-94cb-4ae8-bc55-8f969206f304",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1efe5bfe-96b3-4426-8d15-04f6502e2d4d",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(2014, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Adena",
                            LastName = "Gray"
                        },
                        new
                        {
                            Id = "A4B20C1F-13BB-F831-EE9A-83C2F5034EC2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e55648c-d941-4427-b30d-6ed29b33adb0",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f171d489-3af2-4329-b2e9-4ca0ccad0687",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1984, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jonas",
                            LastName = "Pascale"
                        },
                        new
                        {
                            Id = "2BE4CA58-BCB8-CF64-F121-E1BD464A80F2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17e8c0c6-775f-4c1a-80ba-ab2c5166e026",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6616d025-675c-409f-afe7-50aab6142730",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(2007, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Declan",
                            LastName = "Maxwell"
                        },
                        new
                        {
                            Id = "D364495F-913B-4505-8809-4F709B3A66CF",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dfde22ff-8a5a-47c5-9a7c-b1d7a70f6005",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30f78502-af03-44b9-8893-2e4c43d71968",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(2006, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Daphne",
                            LastName = "Hiroko"
                        },
                        new
                        {
                            Id = "7D70D508-C8A4-C522-C6D2-0175D3A963E1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c0ac6b7-adac-4a30-8e05-b0c897b1ff8a",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc399271-5b5a-41cd-bf84-a82f556e760f",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1978, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Imani",
                            LastName = "Melyssa"
                        },
                        new
                        {
                            Id = "9B2B64D2-A663-906D-88BF-C783B7DFED12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57fda1ad-faa0-4abb-b968-61d6706be347",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c77dd4ed-fd8c-41e9-96d6-a9557d30f54a",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1969, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Hayes",
                            LastName = "Linus"
                        },
                        new
                        {
                            Id = "EC5306BA-5307-1D1F-2AB6-72309C38CAF8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af180fa3-0ca8-4da9-a65c-bda5d1c2ff9f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ff53b41-a80b-4c09-bdb0-56498aa5ee23",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1997, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Florence",
                            LastName = "Naida"
                        },
                        new
                        {
                            Id = "333C9736-9F1B-90AB-1A26-C805AF166493",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bdb6ba72-04c9-4a92-9893-a5ef34f52c4c",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a389f113-d995-443f-9fd1-f447b6a2d728",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1997, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Scarlet",
                            LastName = "Cynthia"
                        });
                });

            modelBuilder.Entity("Library.Entities.Book", b =>
                {
                    b.HasOne("Library.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Data.ApplicationUser", "Borrower")
                        .WithMany()
                        .HasForeignKey("BorrowerId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
