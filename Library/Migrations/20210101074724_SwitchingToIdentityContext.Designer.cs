// <auto-generated />
using System;
using Library.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Library.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210101074724_SwitchingToIdentityContext")]
    partial class SwitchingToIdentityContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Library.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "James",
                            LastName = "Bond"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Jackie",
                            LastName = "Chan"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Sylvester",
                            LastName = "Stallone"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Van",
                            LastName = "Damme"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Jet",
                            LastName = "Lee"
                        });
                });

            modelBuilder.Entity("Library.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("BorrowerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BorrowerId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            IsAvailable = true,
                            Title = "Spectre"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            IsAvailable = true,
                            Title = "Casino Royal"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            IsAvailable = true,
                            Title = "007"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 1,
                            IsAvailable = true,
                            Title = "The spy who loved me"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 1,
                            IsAvailable = true,
                            Title = "From russia with love"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 1,
                            IsAvailable = true,
                            Title = "Die another day"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 2,
                            IsAvailable = true,
                            Title = "Rush Hour"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 2,
                            IsAvailable = true,
                            Title = "Police story"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 2,
                            IsAvailable = true,
                            Title = "Who am I?"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 2,
                            IsAvailable = true,
                            Title = "The karate kid"
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 2,
                            IsAvailable = true,
                            Title = "Drunken Master"
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 3,
                            IsAvailable = true,
                            Title = "Rambo"
                        },
                        new
                        {
                            Id = 13,
                            AuthorId = 3,
                            IsAvailable = true,
                            Title = "First Blood"
                        },
                        new
                        {
                            Id = 14,
                            AuthorId = 3,
                            IsAvailable = true,
                            Title = "The expendables"
                        },
                        new
                        {
                            Id = 15,
                            AuthorId = 3,
                            IsAvailable = true,
                            Title = "Escape plan"
                        },
                        new
                        {
                            Id = 16,
                            AuthorId = 3,
                            IsAvailable = true,
                            Title = "Judgment Day"
                        },
                        new
                        {
                            Id = 17,
                            AuthorId = 4,
                            IsAvailable = true,
                            Title = "Hard Target"
                        },
                        new
                        {
                            Id = 18,
                            AuthorId = 4,
                            IsAvailable = true,
                            Title = "Double Impact"
                        },
                        new
                        {
                            Id = 19,
                            AuthorId = 4,
                            IsAvailable = true,
                            Title = "Universal Soldier"
                        },
                        new
                        {
                            Id = 20,
                            AuthorId = 4,
                            IsAvailable = true,
                            Title = "Hard Way"
                        },
                        new
                        {
                            Id = 21,
                            AuthorId = 4,
                            IsAvailable = true,
                            Title = "Street Fighter"
                        },
                        new
                        {
                            Id = 22,
                            AuthorId = 4,
                            IsAvailable = true,
                            Title = "Bullet in the head"
                        },
                        new
                        {
                            Id = 23,
                            AuthorId = 5,
                            IsAvailable = true,
                            Title = "The Black Mask"
                        },
                        new
                        {
                            Id = 24,
                            AuthorId = 5,
                            IsAvailable = true,
                            Title = "Romeo Must Die"
                        },
                        new
                        {
                            Id = 25,
                            AuthorId = 5,
                            IsAvailable = true,
                            Title = "Cradle to the grave"
                        },
                        new
                        {
                            Id = 26,
                            AuthorId = 5,
                            IsAvailable = true,
                            Title = "Once upon a time in China"
                        },
                        new
                        {
                            Id = 27,
                            AuthorId = 5,
                            IsAvailable = true,
                            Title = "Hero"
                        },
                        new
                        {
                            Id = 28,
                            AuthorId = 5,
                            IsAvailable = true,
                            Title = "Fearless"
                        },
                        new
                        {
                            Id = 29,
                            AuthorId = 5,
                            IsAvailable = true,
                            Title = "Fist of legend"
                        },
                        new
                        {
                            Id = 30,
                            AuthorId = 5,
                            IsAvailable = true,
                            Title = "The one"
                        },
                        new
                        {
                            Id = 31,
                            AuthorId = 5,
                            IsAvailable = true,
                            Title = "Unleashed"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Library.Data.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "4D69ED13-08F0-46DE-DE69-5FFE74A43A37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e07a4fd8-1ebb-4f13-988c-cec2a761097a",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "947f077d-8d60-4428-ba88-0b12ca2916e4",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1960, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Debra",
                            LastName = "Kristen"
                        },
                        new
                        {
                            Id = "EC72E9E5-50EB-8460-4469-A916232838B5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04031f8b-6ee3-4d27-bd79-135e12fc0eb7",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0789d673-7fe1-4d02-b0ed-17deae4f8d20",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1964, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Patrick",
                            LastName = "Caleb"
                        },
                        new
                        {
                            Id = "D2D57256-EFC2-3259-D7BB-7A126DDC3CE2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed438531-b7e2-48e8-be6b-e2139a2d646c",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7eab755b-2da7-44a1-a3ad-210651647a4f",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(2007, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Penelope",
                            LastName = "Philip"
                        },
                        new
                        {
                            Id = "8A6C8FB7-461F-187B-0B96-E2EFBBF7A8EB",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98a9d7dd-f0c6-4e54-9dbe-57b32b3caa66",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "029943c1-cbdb-4a61-abd4-7a6d6e058586",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1962, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Armand",
                            LastName = "Jack"
                        },
                        new
                        {
                            Id = "9CDFB677-9945-9AAB-B988-352A780D5F50",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9dd9be8e-0930-45d2-9974-cf07fb08141b",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "507f3d5c-b406-4c9f-b6cd-087192ea3d92",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(2007, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Brittany",
                            LastName = "Elmo"
                        },
                        new
                        {
                            Id = "B0268B9E-510C-8DE9-2C11-31B8FC0AE1F2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "adbf604e-8d7e-4cee-8d79-65fb72b62002",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3de62cdd-8a29-4016-8b5f-90772393b18a",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1970, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Gwendolyn",
                            LastName = "Reese"
                        },
                        new
                        {
                            Id = "F89981C5-066C-CE27-7E6D-FBE7C845C60C",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb8d8e00-c261-4f1b-940e-0b094ae9aa21",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73478e25-1a25-481d-8672-851a5ddfea09",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(2001, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Myra",
                            LastName = "Lana"
                        },
                        new
                        {
                            Id = "C8AB11C9-7812-0753-64CF-46FA919744C0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8485936-397d-4d27-ac56-187fac6d2e07",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b067892-4d51-426d-b257-9cdae2aaeb85",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1972, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Lana",
                            LastName = "Holly"
                        },
                        new
                        {
                            Id = "AEE7B39C-0613-3443-BC1C-6911A94B7846",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4cda554f-7841-491d-8936-a0483c87c255",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "955edc30-5403-4673-9634-df4c9ab87e35",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1965, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Riley",
                            LastName = "Yasir"
                        },
                        new
                        {
                            Id = "0D3F221A-ED66-C81D-9C57-5DBE93551E26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac39ddaf-5d03-4727-a9be-7c1bef6dee69",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a5195ce-5f44-4be8-8038-0d7dcad18f0f",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1977, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Caldwell",
                            LastName = "Kaitlin"
                        },
                        new
                        {
                            Id = "3CC0CC6E-7CD2-BE49-813B-913A94C80FD9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa961721-4bfb-4dc2-9452-802946b08f78",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0e826f09-6f5d-4c3b-80f8-36d7817920ee",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1994, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alfreda",
                            LastName = "Kim"
                        },
                        new
                        {
                            Id = "B87C5391-D282-961A-AADD-10501EFCA2A8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48dd4592-7813-4ada-a2c1-86bfbd704707",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8cbf2693-2137-4f4b-b690-80961e1027ea",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(2007, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Stephen",
                            LastName = "Amethyst"
                        },
                        new
                        {
                            Id = "1144D05C-F75A-AE5C-B806-0EEE7CF38021",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bfcb9994-cefd-44c7-9796-348f0ea478f7",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2b3a012-fb2a-4e0c-bb1e-cd5f0840c1ba",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1965, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Donovan",
                            LastName = "Lacy"
                        },
                        new
                        {
                            Id = "5035504A-00BC-450A-49B8-11F9309CE924",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24ff3908-5a55-4d3d-83a6-b48f775444e4",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a08061b-adcd-457f-bdb0-532e7c6b7ac7",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1959, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Daphne",
                            LastName = "Plato"
                        },
                        new
                        {
                            Id = "FC00EA26-D0AF-876B-C655-5FB95C1BFBBB",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1bb0f940-b4d3-47a5-9250-df5b2b5698c9",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "29dcf7b6-ec69-4122-aa25-14b1d35d7103",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(2014, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Adena",
                            LastName = "Gray"
                        },
                        new
                        {
                            Id = "A4B20C1F-13BB-F831-EE9A-83C2F5034EC2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "18a37947-690e-4c63-a3b6-905080b0d875",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35fbd475-77f0-4883-81ae-1e769190ee8c",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1984, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jonas",
                            LastName = "Pascale"
                        },
                        new
                        {
                            Id = "2BE4CA58-BCB8-CF64-F121-E1BD464A80F2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31e99f1d-2e90-4133-b955-0f57025293ec",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "743d558a-d67d-47b9-bcfd-faea9de17e8d",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(2007, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Declan",
                            LastName = "Maxwell"
                        },
                        new
                        {
                            Id = "D364495F-913B-4505-8809-4F709B3A66CF",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b4ca0bfa-5176-4f55-a181-d64d563dee4c",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "274eac66-254d-4f26-97fa-491b2db1d3b8",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(2006, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Daphne",
                            LastName = "Hiroko"
                        },
                        new
                        {
                            Id = "7D70D508-C8A4-C522-C6D2-0175D3A963E1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8fbcc62c-c6a8-4ae6-8686-ad49fffaab71",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "62fa9f12-37dc-42cc-8570-02f3184a22ee",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1978, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Imani",
                            LastName = "Melyssa"
                        },
                        new
                        {
                            Id = "9B2B64D2-A663-906D-88BF-C783B7DFED12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8cfde59b-345d-4caf-849e-431f8103d6b4",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae6d024b-81fd-432a-a03e-84a34c602cd1",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1969, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Hayes",
                            LastName = "Linus"
                        },
                        new
                        {
                            Id = "EC5306BA-5307-1D1F-2AB6-72309C38CAF8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f07e5c9c-b845-4842-9f84-6ef227644921",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76e0685e-9e1b-4bfe-8d7f-439c62c10e41",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1997, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Florence",
                            LastName = "Naida"
                        },
                        new
                        {
                            Id = "333C9736-9F1B-90AB-1A26-C805AF166493",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d77790f5-6df7-4f71-8366-e056b80e84b8",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c74613d-7ccc-4a4a-8319-69d880a22b61",
                            TwoFactorEnabled = false,
                            DateOfBirth = new DateTime(1997, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Scarlet",
                            LastName = "Cynthia"
                        });
                });

            modelBuilder.Entity("Library.Entities.Book", b =>
                {
                    b.HasOne("Library.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Data.ApplicationUser", "Borrower")
                        .WithMany()
                        .HasForeignKey("BorrowerId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
